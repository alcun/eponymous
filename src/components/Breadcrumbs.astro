---
// Define the static routes and their corresponding labels
const routes = {
  '/': 'Home',
  '/posts': 'Posts',
  '/projects': 'Projects',
};

// Props passed from the page rendering this component
const { currentPath, currentPageTitle } = Astro.props;
console.log(currentPath)
// Function to generate breadcrumb paths from a URL path
function generateBreadcrumbs(urlPath) {
  if (urlPath === '/') return []; // No breadcrumbs on the home page
  
  const segments = urlPath.split('/').filter(Boolean);
  const breadcrumbPaths = [{ path: '/', label: 'Home', }];

  segments.forEach((segment, index) => {
    const path = `/${segment}`;
    const isLast = index === segments.length - 1;
    const label = isLast && currentPageTitle ? currentPageTitle : (routes[path] || segment);
    breadcrumbPaths.push({ path, label, isLast });
  });

  return breadcrumbPaths;
}

// Get breadcrumbs for the current page's path
const breadcrumbs = generateBreadcrumbs(currentPath);
---

{breadcrumbs.length > 0 && (
  <div aria-label="breadcrumb" class="breadcrumbs">
    <ol>
      {breadcrumbs.map(crumb => (
        <li>
          {crumb.isLast ? (
            <span>{crumb.label}</span> // Make last breadcrumb non-clickable
          ) : (
            <a href={crumb.path}>{crumb.label}</a> // Other breadcrumbs are clickable
          )}
        </li>
      ))}
    </ol>
  </div>
)}

<style>
  .breadcrumbs ol {
    margin-bottom: 0.5rem;
    font-size: 0.8rem;
  }

  .breadcrumbs li {
    display: inline;
  }

  .breadcrumbs li:not(:last-child)::after {
    content: " â€º ";
    padding: 0 8px;
  }


  .breadcrumbs span {
    color: var(--text-color);
  }
</style>
